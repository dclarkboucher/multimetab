// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bvs_mcmc
void bvs_mcmc(arma::vec y, arma::mat X, double psi, List hyper_params, arma::mat R, double theta2, int reps, int burnin, int thinning, bool infer_delta, bool refine_betas, bool adaptive, bool vs, double adapt_prop, arma::vec& beta0_samples, arma::mat& beta_samples, arma::mat& gamma_samples, arma::vec& sigma2_samples, arma::vec& delta_samples, arma::vec& rho_samples, arma::vec& acceptance, arma::vec& moves);
RcppExport SEXP _multimetab_bvs_mcmc(SEXP ySEXP, SEXP XSEXP, SEXP psiSEXP, SEXP hyper_paramsSEXP, SEXP RSEXP, SEXP theta2SEXP, SEXP repsSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP infer_deltaSEXP, SEXP refine_betasSEXP, SEXP adaptiveSEXP, SEXP vsSEXP, SEXP adapt_propSEXP, SEXP beta0_samplesSEXP, SEXP beta_samplesSEXP, SEXP gamma_samplesSEXP, SEXP sigma2_samplesSEXP, SEXP delta_samplesSEXP, SEXP rho_samplesSEXP, SEXP acceptanceSEXP, SEXP movesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< List >::type hyper_params(hyper_paramsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type theta2(theta2SEXP);
    Rcpp::traits::input_parameter< int >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< bool >::type infer_delta(infer_deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type refine_betas(refine_betasSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive(adaptiveSEXP);
    Rcpp::traits::input_parameter< bool >::type vs(vsSEXP);
    Rcpp::traits::input_parameter< double >::type adapt_prop(adapt_propSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type beta0_samples(beta0_samplesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type beta_samples(beta_samplesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type gamma_samples(gamma_samplesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sigma2_samples(sigma2_samplesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type delta_samples(delta_samplesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type rho_samples(rho_samplesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type acceptance(acceptanceSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type moves(movesSEXP);
    bvs_mcmc(y, X, psi, hyper_params, R, theta2, reps, burnin, thinning, infer_delta, refine_betas, adaptive, vs, adapt_prop, beta0_samples, beta_samples, gamma_samples, sigma2_samples, delta_samples, rho_samples, acceptance, moves);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_multimetab_bvs_mcmc", (DL_FUNC) &_multimetab_bvs_mcmc, 22},
    {NULL, NULL, 0}
};

RcppExport void R_init_multimetab(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
